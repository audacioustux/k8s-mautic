replicaCount: 1

mautic:
  image:
    repository: tanjim/mautic
    pullPolicy: IfNotPresent

  # existingConfigMap: ""
  # ignore the following values if existingConfigMap is set
  configMap:
    # messenger
    MAUTIC_MESSENGER_DSN_EMAIL: "doctrine://default"
    MAUTIC_MESSENGER_DSN_HIT: "doctrine://default"
    # mailer
    # MAUTIC_MAILER_TRANSPORT: smtp
    # MAUTIC_MAILER_HOST: ""
    # MAUTIC_MAILER_PORT: 25
    # MAUTIC_MAILER_USER: ""
    # MAUTIC_MAILER_PASSWORD: ""
  
  # existingSecret: ""
  # ignore the following values if existingSecret is set
  secret:
    # admin
    MAUTIC_ADMIN_EMAIL: "contact@example.com"
    MAUTIC_ADMIN_PASSWORD: "admin"

  persistence:
    accessMode: ReadWriteMany
    # example: efs, nfs, etc.
    # storageClass: "nfs"

  web:
    resources: {}
      # limits:
      #   memory: 1Gi
      # requests:
      #   cpu: 500m
      #   memory: 256Gi
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 10
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    readinessProbe: &healthcheck
      exec:
        # check if request to /s/login returns 301
        command: 
          - sh
          - -c
          - |
            if [ "$(curl -m 3 -s -o /dev/null -w ''%{http_code}'' http://localhost/s/login)" != "301" ]; then
              exit 1
            fi
    # livenessProbe: &healthcheck

    # TODO: not implemented yet
    # session:
    #   savePath: "tcp://redis:6379"
    #   saveHandler: "redis"

  install:
    siteUrl: "https://localhost:8080"
    resources: {}
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi
  db:
    create: true
    # existingConfigMap: ""
    # ignore the following values if existingConfigMap is set
    configMap:
      MAUTIC_DB_HOST: mysql
      # MAUTIC_DB_HOST_RO: mysql-ro
      MAUTIC_DB_PORT: "3306"
      MAUTIC_DB_NAME: mautic

    # existingSecret: ""
    # ignore the following values if existingSecret is set
    secret:
      MAUTIC_DB_USER: mautic
      MAUTIC_DB_PASSWORD: mautic

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: enabled
  # className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
